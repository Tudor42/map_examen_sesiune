package com.main.map_examen_sesiune.ORM.sql;

import com.main.map_examen_sesiune.ORM.annotations.columntype.*;
import com.main.map_examen_sesiune.ORM.classparser.FieldsParser;
import com.main.map_examen_sesiune.ORM.exceptions.ClassFieldException;
import com.main.map_examen_sesiune.ORM.exceptions.TypeConversionFailedException;

import java.lang.reflect.Field;

public class CreateTableWriter {
    public static String getScript(Class<?> cl) throws TypeConversionFailedException, ClassFieldException {
        StringBuilder res = new StringBuilder("CREATE TABLE " + cl.getSimpleName() + "(");
        for(Field field: FieldsParser.getAllFields(cl)){
            res.append(fieldResolve(field)).append(", ");
        }
        return res.substring(0, res.length() - 2) + ")";
    }

    private static String primaryKey(Field field){
        PrimaryKey an = field.getAnnotation(PrimaryKey.class);
        if(an == null){
            return "";
        }
        return " PRIMARY KEY" + (an.autoInc()?" GENERATED BY DEFAULT AS IDENTITY": "");
    }

    private static String foreignKey(Field field){
        ForeignKey an = field.getAnnotation(ForeignKey.class);
        if(an == null){
            return "";
        }
        return ", FOREIGN KEY (" + field.getName() + ") REFERENCES " + an.entity().getSimpleName() +
                "(" + an.referencedColumn() + ")"
                + (an.rule() == FkRules.CASCADE?
                " ON DELETE CASCADE ON UPDATE CASCADE":
                an.rule() == FkRules.SET_NULL?
                        " ON DELETE SET NULL ON UPDATE SET NULL":"");
    }

    private static String fieldResolve(Field field) throws TypeConversionFailedException, ClassFieldException {
        String type = TypeConvertorJavaSQL.getSQLType(field.getType().getSimpleName());
        if(type==null && field.getAnnotation(Enumerated.class) == null){
            throw new ClassFieldException("Field " + field.getName() + " may be of type enum but is not specified. " +
                    "Please use @Enumerated annotation for this field");
        }
        return field.getName() + " " +  (type==null?TypeConvertorJavaSQL.
                getSQLType(field.getAnnotation(Enumerated.class).type().name().toLowerCase()):type)
                + primaryKey(field) +
                (field.getAnnotation(NotNull.class) != null? " NOT NULL": "")
                + foreignKey(field);
    }
}
